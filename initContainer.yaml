apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  - name: hello-container
    image: k8s.gcr.io/echoserver:1.4
  initContainers:
  - name: init-myservice
    # run nslookup until find the domain's ip
    # the "/var/run/secrets/kubernetes.io/serviceaccount/namespace" will store current namespace name
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
  - name: init-mydb
    # because of those container is in the same namespace, it can only use service name to nslookup
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup mydb; do echo waiting for mydb; sleep 2; done"]
  - name: init-from-another-namespace
    # because of those container is in the different same namespace, it should nslookup with full domain name
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup myanother.test.svc.cluster.local; do echo waiting for mydb; sleep 2; done"]
---
apiVersion: v1
kind: Service
metadata:
  name: myservice
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9376
---
apiVersion: v1
kind: Service
metadata:
  name: mydb
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9377
---
apiVersion: v1
kind: Service
metadata:
  name: myhello
spec:
  type: NodePort
  selector:
    app: myapp
  ports:
  - port: 8080
---
apiVersion: v1
kind: Namespace
metadata:
    name: test  # create namespace named test
---
apiVersion: v1
kind: Service
metadata:
  name: myanother
  namespace: test  # create service at test namespace
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9378

